from geneformer import EmbExtractor
import torch
import gc
import anndata as ad
import tiledbsoma as soma
import tiledb
import plotly.express as px
from umap import UMAP

from geneformer import TranscriptomeTokenizer
from pathlib import Path

import os
from dotenv import load_dotenv

dataset_name = "extra_pal"
results_path = Path(f"/home/ubuntu/geneformer_eval/results/{dataset_name}")
h5ad_path = results_path / Path(f"h5ad_files/")


print('- tokenizing data...')
tk = TranscriptomeTokenizer({"soma_joinid": "soma_joinid"}, nproc=16)
tk.tokenize_data(h5ad_path, 
                 results_path, 
                 dataset_name, 
                 file_format="h5ad",
                 use_generator=True,)

torch.cuda.empty_cache()
gc.collect()
print('     data tokenizied!')

print(' - extracting embeddings...')
# initiate EmbExtractor
embex = EmbExtractor(
    emb_label=["soma_joinid"],
    max_ncells=None,
    forward_batch_size=32
    )

# extracts embedding from input data
# input data is tokenized rank value encodings generated by Geneformer tokenizer (see tokenizing_scRNAseq_data.ipynb)
# example dataset: https://huggingface.co/datasets/ctheodoris/Genecorpus-30M/tree/main/example_input_files/cell_classification/disease_classification/human_dcm_hcm_nf.dataset
embs = embex.extract_embs("/home/ubuntu/geneformer_eval/Geneformer/geneformer-12L-30M",
                          results_path / f"{dataset_name}.dataset",
                          results_path,
                          dataset_name)
print('     extracted embeddings!')

# read soma
load_dotenv("/home/ubuntu/.aws.env")

ACCESS_KEY = ""
SECRET_KEY = ""
SOMA_URI = ""

soma_experiment = soma.Experiment.open(SOMA_URI, context=soma.SOMATileDBContext(tiledb_ctx=tiledb.Ctx({
        "vfs.s3.aws_access_key_id": ACCESS_KEY,
        "vfs.s3.aws_secret_access_key": SECRET_KEY,
        "vfs.s3.region": "us-east-2"
    })))

obs_df = soma_experiment.obs.read(
                    column_names=("soma_joinid", "standard_true_celltype", "sample_name", "study_name", "tissue_collected"),
                ).concat().to_pandas()

embeddings_df = embs.set_index("soma_joinid").join(obs_df.set_index("soma_joinid"))
print("**** embeddings_df SHAPE: ", embeddings_df.shape)


print('plotting umap')  
umap_model = UMAP(n_components=2, n_neighbors=15, min_dist=0.15, transform_seed=42)
model = umap_model.fit(embeddings_df.loc[:,0:511])

umap_transformed = model.transform(embeddings_df.loc[:,0:511])

_x, _y = "umap_0", "umap_1"
embeddings_df[_x] = umap_transformed[:, 0]
embeddings_df[_y] = umap_transformed[:, 1]

embeddings_df.to_csv(results_path / "scref_train_zero_shot_umap.csv")

fig_1 = px.scatter(embeddings_df, x=_x, y=_y, color="standard_true_celltype", width=1000, height=800)
fig_1.update_traces(marker=dict(size=3, opacity=0.5,))
fig_1

fig_2 = px.scatter(embeddings_df, x=_x, y=_y, color="study_name", width=1000, height=800)
fig_2.update_traces(marker=dict(size=3, opacity=0.5,))
fig_2

fig_1.write_image(results_path / "umap_celltype.png")
fig_2.write_image(results_path / "umap_study.png")